// Code generated by Kitex v0.12.1. DO NOT EDIT.

package authservice

import (
	"context"
	"douyin-commerce/auth_service/kitex_gen/auth"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GenerateToken": kitex.NewMethodInfo(
		generateTokenHandler,
		newAuthServiceGenerateTokenArgs,
		newAuthServiceGenerateTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ValidateToken": kitex.NewMethodInfo(
		validateTokenHandler,
		newAuthServiceValidateTokenArgs,
		newAuthServiceValidateTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RevokeToken": kitex.NewMethodInfo(
		revokeTokenHandler,
		newAuthServiceRevokeTokenArgs,
		newAuthServiceRevokeTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	authServiceServiceInfo                = NewServiceInfo()
	authServiceServiceInfoForClient       = NewServiceInfoForClient()
	authServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return authServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return authServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "AuthService"
	handlerType := (*auth.AuthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func generateTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceGenerateTokenArgs)
	realResult := result.(*auth.AuthServiceGenerateTokenResult)
	success, err := handler.(auth.AuthService).GenerateToken(ctx, realArg.UserId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAuthServiceGenerateTokenArgs() interface{} {
	return auth.NewAuthServiceGenerateTokenArgs()
}

func newAuthServiceGenerateTokenResult() interface{} {
	return auth.NewAuthServiceGenerateTokenResult()
}

func validateTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceValidateTokenArgs)
	realResult := result.(*auth.AuthServiceValidateTokenResult)
	success, err := handler.(auth.AuthService).ValidateToken(ctx, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newAuthServiceValidateTokenArgs() interface{} {
	return auth.NewAuthServiceValidateTokenArgs()
}

func newAuthServiceValidateTokenResult() interface{} {
	return auth.NewAuthServiceValidateTokenResult()
}

func revokeTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.AuthServiceRevokeTokenArgs)
	realResult := result.(*auth.AuthServiceRevokeTokenResult)
	success, err := handler.(auth.AuthService).RevokeToken(ctx, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newAuthServiceRevokeTokenArgs() interface{} {
	return auth.NewAuthServiceRevokeTokenArgs()
}

func newAuthServiceRevokeTokenResult() interface{} {
	return auth.NewAuthServiceRevokeTokenResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GenerateToken(ctx context.Context, userId int64) (r *auth.Token, err error) {
	var _args auth.AuthServiceGenerateTokenArgs
	_args.UserId = userId
	var _result auth.AuthServiceGenerateTokenResult
	if err = p.c.Call(ctx, "GenerateToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ValidateToken(ctx context.Context, token string) (r bool, err error) {
	var _args auth.AuthServiceValidateTokenArgs
	_args.Token = token
	var _result auth.AuthServiceValidateTokenResult
	if err = p.c.Call(ctx, "ValidateToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RevokeToken(ctx context.Context, token string) (r bool, err error) {
	var _args auth.AuthServiceRevokeTokenArgs
	_args.Token = token
	var _result auth.AuthServiceRevokeTokenResult
	if err = p.c.Call(ctx, "RevokeToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
